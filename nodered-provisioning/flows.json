[
    {
        "id": "2d38dd747873c1af",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b9ecb2b69cb308ee",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2e1f40f237da4bdb",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.178.52",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fb06d6f2289c4880",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "monitoring",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://influxdb:8086",
        "timeout": "",
        "rejectUnauthorized": true
    },
    {
        "id": "55e6c79a14f087d6",
        "type": "mqtt-sparkplug-broker",
        "name": "",
        "deviceGroup": "",
        "eonName": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "enableStoreForward": false,
        "compressAlgorithm": "",
        "aliasMetrics": false,
        "useTemplates": true,
        "manualEoNBirth": false,
        "primaryScada": ""
    },
    {
        "id": "3b94b790179d1ac9",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": false
    },
    {
        "id": "baa2eede4c186915",
        "type": "mqtt in",
        "z": "2d38dd747873c1af",
        "name": "",
        "topic": "aaa",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2e1f40f237da4bdb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "6c77aff1b6579f63",
                "4d929ad24b9e5b77",
                "49b9f2a04853a8d2",
                "2ea0f394154deb69"
            ]
        ]
    },
    {
        "id": "6c77aff1b6579f63",
        "type": "debug",
        "z": "2d38dd747873c1af",
        "name": "complete",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "4d929ad24b9e5b77",
        "type": "debug",
        "z": "2d38dd747873c1af",
        "name": "msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "4eb5244c7e6eb843",
        "type": "influxdb out",
        "z": "2d38dd747873c1af",
        "influxdb": "fb06d6f2289c4880",
        "name": "",
        "measurement": "snr",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "ae4111280c8a5e40",
        "type": "debug",
        "z": "2d38dd747873c1af",
        "name": "Pressione",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "f8426a9730119a0f",
        "type": "debug",
        "z": "2d38dd747873c1af",
        "name": "Light",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "49b9f2a04853a8d2",
        "type": "function",
        "z": "2d38dd747873c1af",
        "name": "snr",
        "func": "//return msg.payload.uplink_message.rx_metadata.snr;\nmsg.payload = Number(msg.payload.uplink_message.rx_metadata.snr);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "df80e14dd248f38b"
            ]
        ]
    },
    {
        "id": "df80e14dd248f38b",
        "type": "debug",
        "z": "2d38dd747873c1af",
        "name": "snr",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 280,
        "wires": []
    },
    {
        "id": "6bc79c403a26d0e1",
        "type": "influxdb out",
        "z": "2d38dd747873c1af",
        "influxdb": "fb06d6f2289c4880",
        "name": "",
        "measurement": "light",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1220,
        "y": 440,
        "wires": []
    },
    {
        "id": "2ea0f394154deb69",
        "type": "function",
        "z": "2d38dd747873c1af",
        "name": "pressione",
        "func": "msg.payload = msg.payload.uplink_message.decoded_payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "52a435783caf22c3",
                "97f12f0d9121d8dd"
            ]
        ]
    },
    {
        "id": "03befb0051f850cd",
        "type": "influxdb out",
        "z": "2d38dd747873c1af",
        "influxdb": "fb06d6f2289c4880",
        "name": "",
        "measurement": "pressure",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "52a435783caf22c3",
        "type": "function",
        "z": "2d38dd747873c1af",
        "name": "GetPressure()",
        "func": "msg.payload = msg.payload.pressure;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 540,
        "wires": [
            [
                "ae4111280c8a5e40",
                "03befb0051f850cd"
            ]
        ]
    },
    {
        "id": "97f12f0d9121d8dd",
        "type": "function",
        "z": "2d38dd747873c1af",
        "name": "GetLight()",
        "func": "msg.payload = msg.payload.light;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 380,
        "wires": [
            [
                "f8426a9730119a0f",
                "6bc79c403a26d0e1"
            ]
        ]
    },
    {
        "id": "70e0f50bdf0ad676",
        "type": "debug",
        "z": "b9ecb2b69cb308ee",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 120,
        "wires": []
    },
    {
        "id": "2a759612993ccd3e",
        "type": "mqtt sparkplug in",
        "z": "b9ecb2b69cb308ee",
        "name": "",
        "topic": "spBv1.0/+/DDATA/+/+",
        "qos": "2",
        "broker": "55e6c79a14f087d6",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "eb4cf11cd0860842"
            ]
        ]
    },
    {
        "id": "ad2c02605e3e7300",
        "type": "function",
        "z": "b9ecb2b69cb308ee",
        "name": "splitting",
        "func": "// Ottieni l'array delle metriche\nvar metricsArray = msg.payload.metrics;\n\n// Inizializza un array di messaggi\nvar messages = [];\n\n// Itera su ciascun elemento dell'array\nfor (var i = 0; i < metricsArray.length; i++) {\n    var metric = metricsArray[i];\n\n    // Crea un nuovo messaggio per ciascuna metrica\n    var newMsg = { payload: metric };\n\n    // Aggiungi il nuovo messaggio all'array\n    messages.push(newMsg);\n}\n\n// Restituisci i messaggi separati\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "eb4cf11cd0860842",
        "type": "function",
        "z": "b9ecb2b69cb308ee",
        "name": "function 1",
        "func": "// Iterate over the metrics array and format each one for InfluxDB\nvar metricsArray = msg.payload.metrics;\nvar messages = [];\n\nmetricsArray.forEach(metric => {\n    // Set the measurement name and payload value\n    var newMsg = {\n        measurement: metric.name,\n        payload: {\n            value: metric.value\n        },\n        timestamp: new Date(msg.payload.timestamp).getTime(), // Use provided timestamp\n        tags: {\n            // Example tags - add more if needed\n            host: 'server01',\n            region: 'us-west'\n        }\n    };\n\n    // Add formatted message to the list\n    messages.push(newMsg);\n});\n\n// Return the array of formatted messages\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "70e0f50bdf0ad676",
                "c06e12f78a2a2967"
            ]
        ]
    },
    {
        "id": "c06e12f78a2a2967",
        "type": "influxdb out",
        "z": "b9ecb2b69cb308ee",
        "influxdb": "3b94b790179d1ac9",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "aaa",
        "bucket": "monitoring",
        "x": 1010,
        "y": 320,
        "wires": []
    }
]